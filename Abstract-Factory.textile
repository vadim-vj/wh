<meta name='keywords' content='abstract factory, php'>
_Products:_ *A*, *B*, *C*
_Kinds of products (families):_ *Type1*, *Type2*, *Type3*
Their combinations are non-abstract classes

_Constraint:_ a family of related product objects is designed to be used together

||*A*|*B*|*C*|
|*Type1*||-<code>Type1_A</code>-||
|*Type2*|<code>Type2_A</code>|<code>Type2_B</code>|<code>Type2_C</code>|
|*Type3*|||-<code>Type3_C</code>-|

_Example:_ support for multiple database types

||*Connection*|*Database*|
|*MySQL*|<code>MySQL\Connection</code>|<code>MySQL\Database</code>|
|*PostgreSQL*|<code>PostgreSQL\Connection</code>|<code>PostgreSQL\Database</code>|

_Code example:_ usage
```$connection = new MySQL\Connection();
// ...
$database = new MySQL\Database();```_Needed:_ select database type in runtime
&nbsp;
_Solutions:_
# *Common* (for all languages): "AbstractFactory/Common":https://github.com/vadim-vj/gang-of-four/tree/master/AbstractFactory/Common
# *Prototype-based*: "AbstractFactory/Prototype":https://github.com/vadim-vj/gang-of-four/tree/master/AbstractFactory/Prototype
- object base (for all languages): "Factory/Object":https://github.com/vadim-vj/gang-of-four/blob/master/AbstractFactory/Prototype/Factory/Object.php
- class name based (PHP specific): "Factory/Name":https://github.com/vadim-vj/gang-of-four/blob/master/AbstractFactory/Prototype/Factory/Name.php
# *Based on naming convention* (PHP specific, only for certain class and file structure): "AbstractFactory/NameConv":https://github.com/vadim-vj/gang-of-four/tree/master/AbstractFactory/NameConv

Solutions 2 and 3 are working only when all objects (<code>TypeN_A</code>, <code>TypeN_B</code>, <code>TypeN_C</code>) have the same abstract base class (or implement the same interface, e.g. <code>IBase</code>) or when they can be safely coerced to the correct type. Of course, it's not the major issue in weakly typed PHP, since we can simple omit return type declaration for factory method.