_Class:_ *Adapter*
_Parent class:_ *Target* (our base class)
_Third-party class:_ *Adaptee* (must be adopted to Target)
Since PHP doesn't support multiple inheritance we use object-based version of the pattern

||*Target*|*Adaptee*|
|*Adapter*|<code>implements Target</code>|<code>__construct(Adaptee $adaptee)</code>|

_Example:_ support for third-party (vendor) payment method class

_Code example:_ three classes
<pre><code>$ourPM = new Target();
$vendorPM = new Adaptee();
            
       
function process(Target $pm) {
    // ...
}
process($ourPM);
process($vendorPM); // Error</code></pre>_Needed_: adapt vendor class to our interface (*Adaptee* to *Target*)
&nbsp;
_Solutions_:
# Common (for all languages): "Adapter":https://github.com/vadim-vj/gang-of-four/tree/master/Adapter