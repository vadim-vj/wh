Требования
===============================================================================
PHP не ниже 5.3.4, с поддержкой pdo-mysql и mbstring (для работы с русскими символами).
Значение "short_open_tag" в php.ini не играет роли.
MySQL 5, там особых требований нет


Установка
===============================================================================
Нужно создать базу данных, и залить в нее один из дампов private/database/dump.{innodb|myisam}.sql
Работать будет с любым, но с InnoDВ будут поддерживаться транзакции и внешние ключи.
После этого указать параметры подключения в private/database/config.php

Папка private/import должна быть доступна на запись для веб-сервера, иначе при загрузке файла
будет выведено сообщение об ошибке.


Общие моменты
===============================================================================
Т.к. задача небольшая по объему, никакие фреймворки и сторонние библиотеки не использовались.
Ну, кроме JQuery. Взаимодействие с базой данных идет через PDO. Шаблонатор тоже не использовался,
шаблон - просто php-файл.

Т.к. строки имеют довольно вольный формат, разбор производится через регулярные выражения.
В базе данных есть две доп. таблицы-словари: бренды и категории. Они содержат имена и паттерны,
которые используются для разбора строки. В таблице продуктов хранятся только ID-шники - ссылки
на эти таблицы.

Таблица брендов была набрана просто в процессе отладки; это недолго. Категории (в общих чертах)
я взял с http://www.forhockey.ru (т.к. не разбираюсь в предметной области). Если в других файлах
с данными появятся неизвестные бренды или продукты, не принадлежащие к существующим категориям,
нужно просто добавить новые строки в эти таблицы. Также можно перетасовать категории как угодно,
и результат парсинга данных изменится.

Словари для цветов и размеров находятся прямо в коде (см. ниже).

Цвета, размеры и ориентации клюшек находятся не в отдельных таблицах, а хранятся в
"сериализованном" виде в самой таблице products. Да, это не лучшее решение, но нормализация
усложнила бы модель, и сделала ее менее понятной. Плюс в задании говорится только об одной таблице.

Импорт данных в базу идет не единым действием, а поблочно. Стандартная практика - предотвращает
зависание на больших файлах. Файл загружается private/import, указатель сдвигается на нужную
позицию, читается 500 (это настраиваемо) строк, транзакция-сохранение, и редирект на то же действие,
только уже на 500 строк дальше.

Все комментарии в коде и сообщения выбрасываемых исключений - на английском. Интерфейс на русском.

Несколько продуктов специально оставлены нераспознанными: чтобы показать как это отображается на
экране. Для них нужно добавить соответствующие категории, и они сохранятся в базе.


Структура файлов и папок
===============================================================================
|_ private - основная часть файлов; может быть вынесена из веб-рута
|__|_ import - временный файл для импорта и журнал
|__|_ classes - 4 класса
|__|__|_ Application.php - класс приложения; запуск обработчика и коннект к DB
|__|__|_ Parser.php - класс, разбирающий строки с данными. Также хранит словари
|__|__|_ Controller.php - обработка действий: загрузка файлов, вызов методов, редиректы и т.д.
|__|__|_ Model.php - псевдо-модель, обертка для работы с базой данных
|__|_ template.php - шаблон главной и единственной страницы
|
|_ database
|__|_ dump.{innodb|myisam}.sql - дампы базы
|__|_ config.php - конфиг соединения с БД
|
|_ public  - js/css; общедоступные файлы
|
|_ index.php - endpoint, скрипт запуска приложения


Алгоритм разбора данных
===============================================================================
Основная идея - из строки последовательно вырезаются (совпадающие с регулярным выражением) токены,
и записываются в результат. Делается это при помощи функции preg_replace_callback(). Пример:

$line = 'Easton A147102 Коньки хоккейные STEALTH S11 Composite SR - 9.5  W';

1. Артикль:
$result['article'] = 'A147102';
$line = 'Easton Коньки хоккейные STEALTH S11 Composite SR - 9.5  W';

2. Бренд (паттерн содержит ID брендов - "(?<1>Pallas)|(?<2>Easton)")
$result['brand_id'] = 2;
$line = 'Коньки хоккейные STEALTH S11 Composite SR - 9.5  W';

3. Размеры:
$result['sizes'] = array_merge(..., array('9.5 W'));
$line = 'Коньки хоккейные STEALTH S11 Composite SR';

4. Категория и имя продукта (паттерн содержит ID категорий - "(?<1>Коньки...SR)|(?<2>Коньки...JR)|(?<3>Клюшки)")
$result['category_id'] = 1;
$result['name'] = 'Коньки';
$line = 'Хоккейные STEALTH S11 Composite SR';

5. Модель - оставшаяся часть строки:
$result['model'] = $line = 'Хоккейные STEALTH S11 Composite SR';

Немного изменив словарь категорий, можно, например, сделать так, чтобы выбиралось 'Коньки хоккейные'
в качестве имени продукта. На сам алгоритм это не влияет.
